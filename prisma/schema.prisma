datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id                    String   @id @default(cuid())
  name                  String
  age                   String
  bio                   String
  traits               String[]
  personality          String?
  powerLevel           Int
  rarity               String?
  alignment            String    // blackhat | whitehat | greyhat
  emotionalBaseline    Float     // 0.0 to 1.0
  interactionPrefs     Json
  culturalContext      String[]
  fundamentalValues    String[]
  adaptability         Float?
  learningRate         Float?    // 0.1 to 0.5
  evolutionStage       Int?      // starts at 1
  metaAwareness       Float?    // 0.0 to 1.0
  dialogueStyle       String?
  moonstoneBonus      Float?
  mbti                String?
  nftMetadata         Json?
  dateGenerated       DateTime  @default(now())
  isActive            Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model NFTMetadata {
  id            Int         @id @default(autoincrement())
  tokenId       Int         @unique
  ownerAddress  String
  metadataUri   String
  imageUri      String
  traits        Json
  dialogueStyle String[]
  balance       Int         @default(0)
  coreMemory    CoreMemory?
  adminLogs     AdminLog[]
  lastInteraction DateTime  @default(now())
  isActive      Boolean     @default(true)
  messages    ChatMessage[]
}

model CoreMemory {
  id                    String      @id @default(cuid())
  nftId                 Int         @unique
  nft                   NFTMetadata @relation(fields: [nftId], references: [tokenId])
  baseTraits           String[]
  originStory          String      @db.Text
  fundamentalValues    String[]
  emotionalBaseline    Float
  era                  String
  culturalContext      String[]
  basicTruths          String[]
  userTrust            Float
  userAffinity         Float
  significantInteractions Json[]
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
}

model AdminLog {
  id        Int       @id @default(autoincrement())
  nftId     Int?
  nft       NFTMetadata? @relation(fields: [nftId], references: [tokenId])
  timestamp DateTime  @default(now())
  level     String
  message   String    @db.Text
}

model ChatMessage {
  id          Int      @id @default(autoincrement())
  ethAddress  String
  nftId       Int
  content     String   @db.Text
  timestamp   DateTime @default(now())
  nft         NFTMetadata @relation(fields: [nftId], references: [tokenId])
}

model UserProfile {
  id            Int       @id @default(autoincrement())
  ethAddress    String    @unique
  sandDollars   Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  transactions  BalanceTransaction[]
}

model BalanceTransaction {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        UserProfile @relation(fields: [userId], references: [id])
  type        String      // 'EARN' or 'SPEND'
  amount      Int
  description String
  timestamp   DateTime    @default(now())
}

model Memory {
  id          String   @id @default(cuid())
  nftId       String
  content     String
  type        String   @default("SHORT_TERM")
  sentiment   Float
  importance  Float
  timestamp   DateTime @default(now())
  topics      String[]

  @@index([nftId])
}

model Player {
  id            Int      @id @default(autoincrement())
  ethAddress    String?  @unique
  miningRate    Float    @default(0)
  moonstoneMined Float   @default(0)
  lastMiningCheck DateTime @default(now())
  ownedSpaces   Coordinate[]
}

model Coordinate {
  id          Int      @id @default(autoincrement())
  x           Int
  y           Int
  ownerId     Int?
  owner       Player?  @relation(fields: [ownerId], references: [id])
  miningStart DateTime?
  lastMined   DateTime?
  memories    CoordinateMemory[]
}

model CoordinateMemory {
  id           Int      @id @default(autoincrement())
  coordinateId Int
  coordinate   Coordinate @relation(fields: [coordinateId], references: [id])
  playerId     Int
  transcript   String
  summary      String
  timestamp    DateTime @default(now())
}

model MiningHistory {
  id           Int      @id @default(autoincrement())
  playerId     Int
  coordinateId Int
  amount       Float
  timestamp    DateTime @default(now())
}
